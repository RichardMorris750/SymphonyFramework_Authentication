import System
import System.Collections.Generic
import System.Text

import Symphony.Harmony
import Symphony.Harmony.Model
import Symphony.Conductor.Model
import ProgramLibrary

namespace AuthorizationExample

    ;;; <summary>
    ;;; The main entry point for the application.
    ;;; </summary>
    main

	proc

		;;comment out this line to run the example against a Symphony Bridge server.  The
		;;ProgramLibrary assembly needs to be placed into the symphony Bridge folder.
		.define D_LOCAL_ACCESS	,1

		;;this program requires the Symphony example database installed.  Check...
		data logValue	,a255
		data logLength	,i4
		getlog("SYMPHONYDATA", logValue, logLength)
		if (!logLength)
		begin
			Console.WriteLine("*********************************************************")
			Console.WriteLine("*                                                       *")
			Console.WriteLine("* Symphony sample data is required to run this program  *")
			Console.WriteLine("*                                                       *")
			Console.WriteLine("* Please visit www.symphonyframework.net to download    *")
			Console.WriteLine("* and install the sample database.  Click on the        *")
			Console.WriteLine("* download tab to download the installer.               *")
			Console.WriteLine("*                                                       *")
			Console.WriteLine("*********************************************************")
			Console.ReadKey()
			stop
		end
		
		ProgramClass.callRoutines()
		Console.ReadKey()

	endmain

	public class ProgramClass
		
		public static async method callRoutines, void
			endparams
		proc

			data response	,@List<DataObjectBase>	,new List<DataObjectBase>()
			
			data connector, @DBConnector
			
			;;these are method calls
			try
			begin
				;;this should be a valid call
.ifdef D_LOCAL_ACCESS
				connector = new DBConnector("symlocal:richard/password!ProgramLibrary.TableMapper.MapTableToFile")
.else
				connector = new DBConnector("symremote:richard/password@localhost:8082!ProgramLibrary.TableMapper.MapTableToFile", HostServiceType.ConsoleServerTcp)
.endc
				response = await DataExecute.RunDataExecute(connector, "exec @ProgramLibrary.ProgramClass.ProgramMethod ", new StringResponse_Data(), "Hello World")
				Console.WriteLine("method call : result = " + ((StringResponse_Data)response[0]).StringValue)
			end
			catch (e, @Exception)
			begin
				Console.WriteLine(e.Message)
			end
			endtry
			
			try
			begin
				;;this should be blocked from any connections
.ifdef D_LOCAL_ACCESS
				connector = new DBConnector("symlocal:guest/password!ProgramLibrary.TableMapper.MapTableToFile")
.else
				connector = new DBConnector("symremote:guest/password@localhost:8082!ProgramLibrary.TableMapper.MapTableToFile", HostServiceType.ConsoleServerTcp)
.endc
				response = await DataExecute.RunDataExecute(connector, "exec @ProgramLibrary.ProgramClass.ProgramMethod ", new StringResponse_Data(), "Hello World")
				Console.WriteLine("method call : result = " + ((StringResponse_Data)response[0]).StringValue)
			end
			catch (e, @Exception)
			begin
				Console.WriteLine(e.Message)
			end
			endtry
			
			try
			begin
				;;this should be blocked from making the call
.ifdef D_LOCAL_ACCESS
				connector = new DBConnector("symlocal:anonymous/password!ProgramLibrary.TableMapper.MapTableToFile")
.else
				connector = new DBConnector("symremote:anonymous/password@localhost:8082!ProgramLibrary.TableMapper.MapTableToFile", HostServiceType.ConsoleServerTcp)
.endc
				response = await DataExecute.RunDataExecute(connector, "exec @ProgramLibrary.ProgramClass.ProgramMethod ", new StringResponse_Data(), "Hello World")
				Console.WriteLine("method call : result = " + ((StringResponse_Data)response[0]).StringValue)
			end
			catch (e, @Exception)
			begin
				Console.WriteLine(e.Message)
			end
			endtry
			
			
			;;these are select calls
			
			try
			begin
				;;this should be a valid call
.ifdef D_LOCAL_ACCESS
				connector = new DBConnector("symlocal:richard/password!ProgramLibrary.TableMapper.MapTableToFile")
.else
				connector = new DBConnector("symremote:richard/password@localhost:8082!ProgramLibrary.TableMapper.MapTableToFile", HostServiceType.ConsoleServerTcp)
.endc
				response = await DataSelect.RunDataSelect(connector, "select id, description from PART", new Part_Data())
				Console.WriteLine("select call : result = " + ((Part_Data)response[0]).Description)

				;;try again
				response = await DataSelect.RunDataSelect(connector, "select id, description from PART", new Part_Data())
				Console.WriteLine("select call : result = " + ((Part_Data)response[1]).Description)

				;;try again
				response = await DataSelect.RunDataSelect(connector, "select id, description from PART", new Part_Data())
				Console.WriteLine("select call : result = " + ((Part_Data)response[2]).Description)
				
				;;try again - this should fail
				response = await DataSelect.RunDataSelect(connector, "select id, description, technical_info from PART", new Part_Data())
				Console.WriteLine("select call : result = " + ((Part_Data)response[3]).Description)
				
			end
			catch (e, @Exception)
			begin
				Console.WriteLine(e.Message)
			end
			endtry
			
			try
			begin
				;;this should not allow access to the table
.ifdef D_LOCAL_ACCESS
				connector = new DBConnector("symlocal:anonymous/password!ProgramLibrary.TableMapper.MapTableToFile")
.else
				connector = new DBConnector("symremote:anonymous/password@localhost:8082!ProgramLibrary.TableMapper.MapTableToFile", HostServiceType.ConsoleServerTcp)
.endc
				response = await DataSelect.RunDataSelect(connector, "select id, description from PART", new Part_Data())
				Console.WriteLine("select call : result = " + ((Part_Data)response[0]).Description)
			end
			catch (e, @Exception)
			begin
				Console.WriteLine(e.Message)
			end
			endtry
			
			try
			begin
				;;this should not allow access to the select field
.ifdef D_LOCAL_ACCESS
				connector = new DBConnector("symlocal:richard/password!ProgramLibrary.TableMapper.MapTableToFile")
.else
				connector = new DBConnector("symremote:richard/password@localhost:8082!ProgramLibrary.TableMapper.MapTableToFile", HostServiceType.ConsoleServerTcp)
.endc
				response = await DataSelect.RunDataSelect(connector, "select id, description, technical_info from PART", new Part_Data())
				Console.WriteLine("select call : result = " + ((Part_Data)response[0]).Description)
			end
			catch (e, @Exception)
			begin
				Console.WriteLine(e.Message)
			end
			endtry
			
			
			Console.WriteLine("press a key")
			
		endmethod

	endclass


endnamespace
